<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}AddRepository;
use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}AddElasticRepository;

class {{domainCaps}}AddBusiness
{
    private ${{domain}}AddRepository;
    private ${{domain}}AddElasticRepository;

    /**
     * constructor
     * @param {{domainCaps}}AddRepository ${{domain}}AddRepository
     * @param {{domainCaps}}AddElasticRepository ${{domain}}AddElasticRepository
     * @return void
     */
    public function __construct(
        {{domainCaps}}AddRepository ${{domain}}AddRepository,
        {{domainCaps}}AddElasticRepository ${{domain}}AddElasticRepository
    ) {
        $this->{{domain}}AddRepository = ${{domain}}AddRepository;
        $this->{{domain}}AddElasticRepository = ${{domain}}AddElasticRepository;
    }

    /**
     * process the request with business rules
     * @param array $data
     * @return object
     */
    public function process(
        array $data
    ) {
        $id = $this->{{domain}}AddRepository->insert(
            $data
        );
        
        $insertedData = (array) $this->{{domain}}AddRepository->getById(
            $id
        );
        $this->{{domain}}AddElasticRepository->insert(
            $insertedData,
            $id
        );
        return $this->{{domain}}AddRepository->getById(
            $id
        );
    }
}
