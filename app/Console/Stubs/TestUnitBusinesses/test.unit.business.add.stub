<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}AddRepository;
use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}AddElasticRepository;
use App\Exceptions\Custom\ElasticException;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}AddBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}AddRepositorySpy = Mockery::spy(
            {{domainCaps}}AddRepository::class
        );
        ${{domain}}AddElasticRepositorySpy = Mockery::spy(
            {{domainCaps}}AddElasticRepository::class
        );

        ${{domain}}AddBusiness = new {{domainCaps}}AddBusiness(
            ${{domain}}AddRepositorySpy,
            ${{domain}}AddElasticRepositorySpy,
        );

        $this->assertInstanceOf(
            {{domainCaps}}AddBusiness::class,
            ${{domain}}AddBusiness
        );
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::process
     */
    public function testProcess()
    {
        $id = '01E4E7RTJ3C11B6Z0H0QTJCW04';
        $users = [
            [
                'user_id' => 1,
                'user_email' => 'email@user.com',
                'user_name' => 'User Name'
            ]
        ];
        $location = [
            [
                'lat' => 90,
                'lon' => 90,
            ]
        ];
        $data = [
            'id' => $id,
            'client_id' => 1,
            'users' => $users,
            'location' => $location,
        ];
        $returnData = [
            'id' => $id,
            'client_id' => 1,
            'users' => json_encode($users),
            'location' => json_encode($location),
        ];

        ${{domain}}AddRepositoryMock = Mockery::mock(
            {{domainCaps}}AddRepository::class
        )->shouldReceive('beginTrans')
            ->andReturn(true)
            ->shouldReceive('insert')
            ->andReturn($id)
            ->shouldReceive('getById')
            ->with($id)
            ->andReturn($returnData)
            ->shouldReceive('commit')
            ->andReturn(true)
            ->getMock();

        ${{domain}}AddElasticRepositoryMock = Mockery::mock(
            {{domainCaps}}AddElasticRepository::class
        )->shouldReceive('insert')
            ->andReturn($id)
            ->getMock();

        ${{domain}}AddBusiness = new {{domainCaps}}AddBusiness(
            ${{domain}}AddRepositoryMock,
            ${{domain}}AddElasticRepositoryMock,
        );

        $process = ${{domain}}AddBusiness->process($data);

        $this->assertEquals($returnData, $process);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::process
     */
    public function testProcessErrorOnElastic()
    {
        $id = '01E4E7RTJ3C11B6Z0H0QTJCW04';
        $users = [
            [
                'user_id' => 1,
                'user_email' => 'email@user.com',
                'user_name' => 'User Name'
            ]
        ];
        $location = [
            [
                'lat' => 90,
                'lon' => 90,
            ]
        ];
        $data = [
            'id' => $id,
            'client_id' => 1,
            'users' => $users,
            'location' => $location,
        ];
        $returnData = [
            'id' => $id,
            'client_id' => 1,
            'users' => json_encode($users),
            'location' => json_encode($location),
        ];

        ${{domain}}AddRepositoryMock = Mockery::mock(
            {{domainCaps}}AddRepository::class
        )->shouldReceive('beginTrans')
            ->andReturn(true)
            ->shouldReceive('insert')
            ->andReturn($id)
            ->shouldReceive('getById')
            ->with($id)
            ->andReturn($returnData)
            ->shouldReceive('rollBack')
            ->andReturn(true)
            ->getMock();

        ${{domain}}AddElasticRepositoryMock = Mockery::mock(
            {{domainCaps}}AddElasticRepository::class
        )->shouldReceive('insert')
            ->andReturn(null)
            ->getMock();

        ${{domain}}AddBusiness = new {{domainCaps}}AddBusiness(
            ${{domain}}AddRepositoryMock,
            ${{domain}}AddElasticRepositoryMock,
        );

        $this->expectExceptionObject(
            new ElasticException(
                'Error on save into Elasticsearch',
                500
            )
        );
        ${{domain}}AddBusiness->process($data);
    }

    public function tearDown()
    {
        Mockery::close();
    }
}
