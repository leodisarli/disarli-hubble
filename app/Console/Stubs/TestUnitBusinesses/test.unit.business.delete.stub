<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}DeleteRepository;
use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}DeleteElasticRepository;
use App\Exceptions\Custom\DataNotFoundException;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}DeleteBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeleteBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}DeleteRepositorySpy = Mockery::spy(
            {{domainCaps}}DeleteRepository::class
        );
        ${{domain}}DeleteElasticRepository = Mockery::spy(
            {{domainCaps}}DeleteElasticRepository::class
        );

        ${{domain}}DeleteBusiness = new {{domainCaps}}DeleteBusiness(
            ${{domain}}DeleteRepositorySpy,
            ${{domain}}DeleteElasticRepository
        );

        $this->assertInstanceOf(
            {{domainCaps}}DeleteBusiness::class,
            ${{domain}}DeleteBusiness
        );
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeleteBusiness::process
     */
    public function testProcess()
    {
        $id = '01E4E70YSH4J9C0JP8YRJ8SF17';
        $data = [
            'id' => $id,
            'field' => 'teste',
        ];
        $index = 'test-2020-03';

        ${{domain}}DeleteRepositoryMock = Mockery::mock(
            {{domainCaps}}DeleteRepository::class
        )->shouldReceive('getById')
            ->with($id)
            ->andReturn((object) $data)
            ->shouldReceive('delete')
            ->once()
            ->with($id)
            ->andReturn(true)
            ->getMock();

        ${{domain}}AddElasticRepositoryMock = Mockery::mock(
            {{domainCaps}}DeleteElasticRepository::class
        )->shouldReceive('getIndexById')
            ->with($id)
            ->andReturn($index)
            ->shouldReceive('delete')
            ->andReturn(true)
            ->getMock();

        ${{domain}}DeleteBusiness = new {{domainCaps}}DeleteBusiness(
            ${{domain}}DeleteRepositoryMock,
            ${{domain}}AddElasticRepositoryMock
        );
        $process = ${{domain}}DeleteBusiness->process(
            $id
        );

        $this->assertEquals($process, true);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeleteBusiness::process
     */
    public function testProcessAndNotFound()
    {
        $id = '01E4E70YSH4J9C0JP8YRJ8SF17';

        ${{domain}}DeleteRepositoryMock = Mockery::mock(
            {{domainCaps}}DeleteRepository::class
        )->shouldReceive('getById')
            ->with($id)
            ->andReturn(null)
            ->shouldReceive('delete')
            ->never()
            ->with($id)
            ->andReturn(true)
            ->getMock();

        ${{domain}}AddElasticRepositorySpy = Mockery::spy(
            {{domainCaps}}DeleteElasticRepository::class
        );

        ${{domain}}DeleteBusiness = new {{domainCaps}}DeleteBusiness(
            ${{domain}}DeleteRepositoryMock,
            ${{domain}}AddElasticRepositorySpy
        );

        $this->expectExceptionObject(
            new DataNotFoundException(
                'Data not found',
                404
            )
        );

        ${{domain}}DeleteBusiness->process(
            $id
        );
    }

    public function tearDown()
    {
        Mockery::close();
    }
}
