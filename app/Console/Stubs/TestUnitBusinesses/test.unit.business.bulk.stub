<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}BulkElasticRepository;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}BulkBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}BulkElasticRepositorySpy = Mockery::spy(
            {{domainCaps}}BulkElasticRepository::class
        );

        ${{domain}}BulkBusiness = new {{domainCaps}}BulkBusiness(
            ${{domain}}BulkElasticRepositorySpy
        );

        $this->assertInstanceOf(
            {{domainCaps}}BulkBusiness::class,
            ${{domain}}BulkBusiness
        );
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::process
     */
    public function testProcess()
    {
        ${{domain}}BulkElasticRepositoryMock = Mockery::mock(
            {{domainCaps}}BulkElasticRepository::class
        )->shouldReceive('getBulk')
            ->with(
                [
                    '01E4E622FPAKTD2T7YNNWPPYPN',
                    '01E4E6293KGGR7P6EYWZY79A27',
                    '01E4E62JN67PXCSAMW7Z1D4XYP',
                    '01E4E62TR8CZ64C7JTQXYEK3BY',
                ],
                ['page' => 2]
            )
            ->andReturn([])
            ->getMock();

        ${{domain}}BulkBusiness = new {{domainCaps}}BulkBusiness(
            ${{domain}}BulkElasticRepositoryMock
        );
        $business = ${{domain}}BulkBusiness->process(
            [
                '01E4E622FPAKTD2T7YNNWPPYPN',
                '01E4E6293KGGR7P6EYWZY79A27',
                '01E4E62JN67PXCSAMW7Z1D4XYP',
                '01E4E62TR8CZ64C7JTQXYEK3BY',
            ],
            ['page' => 2]
        );

        $this->assertEquals(
            [],
            $business
        );
    }

    public function tearDown()
    {
        Mockery::close();
    }
}
