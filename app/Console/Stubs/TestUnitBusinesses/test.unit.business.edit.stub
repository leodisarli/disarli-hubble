<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}EditRepository;
use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}EditElasticRepository;
use App\Exceptions\Custom\DataNotFoundException;
use App\Exceptions\Custom\ElasticException;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}EditBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}EditRepositorySpy = Mockery::spy(
            {{domainCaps}}EditRepository::class
        );
        ${{domain}}EditElasticRepositorySpy = Mockery::spy(
            {{domainCaps}}EditElasticRepository::class
        );

        ${{domain}}EditBusiness = new {{domainCaps}}EditBusiness(
            ${{domain}}EditRepositorySpy,
            ${{domain}}EditElasticRepositorySpy
        );

        $this->assertInstanceOf({{domainCaps}}EditBusiness::class, ${{domain}}EditBusiness);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::process
     */
    public function testProcess()
    {
        $id = '01E4E7RTJ3C11B6Z0H0QTJCW04';
        $users = [
            [
                'user_id' => 1,
                'user_email' => 'email@user.com',
                'user_name' => 'User Name'
            ]
        ];
        $location = [
            [
                'lat' => 90,
                'lon' => 90,
            ]
        ];
        $data = [
            'id' => $id,
            'client_id' => 1,
            'users' => $users,
            'location' => $location,
        ];
        $returnData = [
            'id' => $id,
            'client_id' => 1,
            'users' => json_encode($users),
            'location' => json_encode($location),
        ];
        $index = 'test-2020-03';

        ${{domain}}EditRepositoryMock = Mockery::mock(
            {{domainCaps}}EditRepository::class
        )->shouldReceive('getById')
            ->with($id)
            ->andReturn($returnData)
            ->shouldReceive('beginTrans')
            ->andReturn(true)
            ->shouldReceive('update')
            ->with($data, $id)
            ->andReturn(true)
            ->shouldReceive('commit')
            ->andReturn(true)
            ->getMock();

        ${{domain}}EditElasticRepositoryMock = Mockery::mock(
            {{domainCaps}}EditElasticRepository::class
        )->shouldReceive('getIndexById')
            ->andReturn($index)
            ->shouldReceive('update')
            ->andReturn(true)
            ->getMock();

        ${{domain}}EditBusiness = new {{domainCaps}}EditBusiness(
            ${{domain}}EditRepositoryMock,
            ${{domain}}EditElasticRepositoryMock
        );

        $process = ${{domain}}EditBusiness->process(
            $data,
            $id
        );

        $this->assertEquals($data, $process);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::process
     */
    public function testProcessAndNotFound()
    {
        $id = '01E4E7RTJ3C11B6Z0H0QTJCW04';
        $data = [
            'id' => $id,
            'client_id' => 1,
        ];

        ${{domain}}EditRepositoryMock = Mockery::mock(
            {{domainCaps}}EditRepository::class
        )->shouldReceive('getById')
            ->with($id)
            ->andReturn([])
            ->shouldReceive('update')
            ->never()
            ->with($data, $id)
            ->andReturn(true)
            ->getMock();

        ${{domain}}EditElasticRepositorySpy = Mockery::spy(
            {{domainCaps}}EditElasticRepository::class
        );

        ${{domain}}EditBusiness = new {{domainCaps}}EditBusiness(
            ${{domain}}EditRepositoryMock,
            ${{domain}}EditElasticRepositorySpy
        );

        $this->expectExceptionObject(
            new DataNotFoundException(
                'Data not found',
                404
            )
        );

        ${{domain}}EditBusiness->process($data, $id);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::process
     */
    public function testProcessElasticError()
    {
        $id = '01E4E7RTJ3C11B6Z0H0QTJCW04';
        $users = [
            [
                'user_id' => 1,
                'user_email' => 'email@user.com',
                'user_name' => 'User Name'
            ]
        ];
        $location = [
            [
                'lat' => 90,
                'lon' => 90,
            ]
        ];
        $data = [
            'id' => $id,
            'client_id' => 1,
            'users' => $users,
            'location' => $location,
        ];
        $returnData = [
            'id' => $id,
            'client_id' => 1,
            'users' => json_encode($users),
            'location' => json_encode($location),
        ];

        $index = 'test-2020-03';

        ${{domain}}EditRepositoryMock = Mockery::mock(
            {{domainCaps}}EditRepository::class
        )->shouldReceive('getById')
            ->with($id)
            ->andReturn($returnData)
            ->shouldReceive('beginTrans')
            ->andReturn(true)
            ->shouldReceive('update')
            ->with($data, $id)
            ->andReturn(true)
            ->shouldReceive('rollBack')
            ->andReturn(true)
            ->getMock();

        ${{domain}}EditElasticRepositoryMock = Mockery::mock(
            {{domainCaps}}EditElasticRepository::class
        )->shouldReceive('getIndexById')
            ->andReturn($index)
            ->shouldReceive('update')
            ->andReturn(false)
            ->getMock();

        ${{domain}}EditBusiness = new {{domainCaps}}EditBusiness(
            ${{domain}}EditRepositoryMock,
            ${{domain}}EditElasticRepositoryMock
        );

        $this->expectExceptionObject(
            new ElasticException(
                'Error on save into Elasticsearch',
                500
            )
        );
        ${{domain}}EditBusiness->process(
            $data,
            $id
        );
    }

    public function tearDown()
    {
        Mockery::close();
    }
}
