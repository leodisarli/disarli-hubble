<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use Laravel\Lumen\Testing\DatabaseMigrations;
use Tests\Feature\TestCaseFeature;

class {{domainCaps}}DeadDetailControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeadDetailController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeadDetailController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeadDetailBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeadDetailBusiness::process
     */
    public function testDetail()
    {
        $data = [
            'name' => 'test',
            'age' => 18,
            'origin_sector' => 'test',
            'visits' => 16,
        ];

        $this->json('POST', '/{{domainOriginal}}/add', $data, $this->header);

        $response = json_decode($this->response->getContent(), true);

        sleep(1);
        $this->json('DELETE', '/{{domainOriginal}}/delete/' . $response['data']['id'], [], $this->header);
        sleep(1);
        $this->json('GET', '/{{domainOriginal}}/dead_detail/' . $response['data']['id'], [], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertEquals($data['name'], $response['data']['name']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeadDetailController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeadDetailController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeadDetailBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeadDetailBusiness::process
     */
    public function testDetailNotFound()
    {
        $this->json('GET', '/{{domainOriginal}}/dead_detail/01E492KQX6BW62YEA45SGWRXYQ', [], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(404, $this->response->getStatusCode());
        $this->assertEquals('Data not found', $response['message']);
    }
}
