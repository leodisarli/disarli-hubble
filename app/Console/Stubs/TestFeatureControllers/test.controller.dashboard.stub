<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use Laravel\Lumen\Testing\DatabaseMigrations;
use Tests\Feature\TestCaseFeature;

class {{domainCaps}}DashboardControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DashboardController::__construct
     */
    public function testRequiredFields()
    {
        $this->json('POST', '/{{domainOriginal}}/dashboard', [], $this->header);

        $response = [
            'message' => 'A validation error occurrs',
            'data' => [
                'from' => [
                    'The from field is required.'
                ],
                'to' => [
                    'The to field is required.'
                ],
            ]
        ];

        $result = json_decode($this->response->getContent(), true);

        $this->assertEquals(422, $this->response->getStatusCode());
        $this->assertEquals($response['data']['from'], $result['data']['from']);
        $this->assertEquals($response['data']['to'], $result['data']['to']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DashboardController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DashboardController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DashboardBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DashboardBusiness::process
     */
    public function testDashboard()
    {
        $data = [
            'name' => 'test',
            'year' => 2020,
            'origin_sector' => 'test',
            'visits' => 16,
        ];
        
        $this->call('options', '/{{domainOriginal}}/add', [], $this->header);
        $this->json('POST', '/{{domainOriginal}}/add', $data, $this->header);

        $response = json_decode($this->response->getContent(), true);

        sleep(1);
        $dataDashboard = [
            'from' => date('Y-m-d H:i:s', strtotime('-1 hour')),
            'to' => date('Y-m-d H:i:s', strtotime('+1 hour')),
        ];

        $this->json('POST', '/{{domainOriginal}}/dashboard', $dataDashboard, $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayHasKey('total', $response['data']);
        $this->assertArrayHasKey('aggregations', $response['data']);
    }
}
