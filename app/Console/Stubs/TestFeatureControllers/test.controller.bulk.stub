<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use Laravel\Lumen\Testing\DatabaseMigrations;
use Tests\Feature\TestCaseFeature;

class {{domainCaps}}BulkControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::__construct
     */
    public function testRequiredFields()
    {
        $this->json('POST', '/{{domainOriginal}}/bulk', [], $this->header);

        $response = [
            'message' => 'A validation error occurrs',
            'data' => [
                'ids' => [
                    'The ids field is required.'
                ],
            ]
        ];

        $result = json_decode($this->response->getContent(), true);

        $this->assertEquals(422, $this->response->getStatusCode());
        $this->assertEquals('A validation error occurrs', $result['message']);
        $this->assertEquals($response['data']['ids'], $result['data']['ids']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::process
     */
    public function testBulk()
    {
        $data = [
            'name' => 'test',
            'age' => 18,
            'origin_sector' => 'test',
            'visits' => 16,
        ];
        
        $this->call('options', '/{{domainOriginal}}/add', [], $this->header);
        $this->json('POST', '/{{domainOriginal}}/add', $data, $this->header);

        $response = json_decode($this->response->getContent(), true);
        $id = $response['data']['id'];
        $ids = [
            $id
        ];

        sleep(1);
        $this->json('POST', '/{{domainOriginal}}/bulk', ['ids' => $ids], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayHasKey(0, $response['data']);
        $this->assertEquals($id, $response['data'][0]['id']);
    }
}
